from functools import total_ordering
import requests
from peewee import *
from datetime import datetime
import html
import time
import random
import math
import re
import logging
import json
import os

# Configure logging to JSON file
LOGGING_CONFIG = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "file_handler": {
            "class": "logging.FileHandler",
            "filename": "app.log",
            "formatter": "json_formatter"
        },
    },
    "formatters": {
        "json_formatter": {
            "format": "{\"timestamp\":\"%(asctime)s\", \"level\":\"%(levelname)s\", \"message\":\"%(message)s\"}",
            "datefmt": "%Y-%m-%d %H:%M:%S"
        },
    },
    "root": {
        "handlers": ["file_handler"],
        "level": "DEBUG"
    }
}

# Configure logging using the defined configuration
logging.config.dictConfig(LOGGING_CONFIG)

# SQLite database setup
db = SqliteDatabase("db/cve.sqlite")

# Constant for CVE not found
CVE_NOT_FOUND = "CVE Not Found"

# README file path
README_FILE_PATH = os.path.join('docs', 'README.md')

# Peewee model for the CVE database
class CVE_DB(Model):
    id = AutoField(primary_key=True)
    full_name = CharField(max_length=1024)
    description = CharField(max_length=4098)
    url = CharField(max_length=1024)
    created_at = CharField(max_length=128)
    cve = CharField(max_length=64, index=True)

    class Meta:
        database = db

# Connect to the SQLite database and create tables if they don't exist
with db:
    db.create_tables([CVE_DB])

# Logger setup
logger = logging.getLogger(__name__)

def init_file():
    """Initialize the README file with header information."""
    newline = "# Github CVE Monitor\n\n> Automatic monitor github cve using Github Actions \n\n Last generated : {}\n\n| CVE | Name | Description | Date |\n|---|---|---|---|\n".format(datetime.now())
    with open(README_FILE_PATH, 'w') as f:
        f.write(newline)

def write_file(new_contents):
    """Append new contents to the README file."""
    with open(README_FILE_PATH, 'a') as f:
        f.write(new_contents)

def get_info(year):
    """Fetch CVE information from the GitHub API for a given year."""
    try:
        api = "https://api.github.com/search/repositories?q=CVE-{}&sort=updated&page=1&per_page=100".format(year)
        req = requests.get(api).json()
        req.raise_for_status()
        items = req["items"]
        return items
    except requests.exceptions.RequestException as e:
        logger.error("An error occurred in the network request: %s", e)
        return None

def db_match(items):
    """Match CVE information obtained from GitHub API with the database."""
    regex = r"[Cc][Vv][Ee][-_]\d{4}[-_]\d{4,7}"
    r_list = [
        {
            "id": item["id"],
            "full_name": html.escape(item["full_name"]),
            "description": html.escape(item["description"].strip()) if item["description"] else 'no description',
            "url": item["html_url"],
            "created_at": item["created_at"],
            "cve": re.search(regex, item["html_url"]).group() if re.search(regex, item["html_url"]) else CVE_NOT_FOUND
        }
        for item in items
        if CVE_DB.select().where(CVE_DB.id == item["id"]).count() == 0
    ]
    return sorted(r_list, key=lambda e: e.__getitem__('created_at'))

def main():
    """Main function to fetch, match, and update CVE information."""
    year = datetime.now().year
    sorted_list = []

    for i in range(year, 1999, -1):
        item = get_info(i)
        if item is None or len(item) == 0:
            continue
        logger.info(f"Year : {i} : raw data obtained {len(item)} articles")
        sorted = db_match(item)
        if len(sorted) != 0:
            logger.info(f"Year {i} : update {len(sorted)} articles")
            sorted_list.extend(sorted)
        count = random.randint(3, 15)
        time.sleep(count)

    cur = db.cursor()
    cur.execute("SELECT * FROM CVE_DB ORDER BY cve DESC;")
    result = cur.fetchall()

    for row in result:
        newline = f"| {row[5].upper()} | [{row[1]}]({row[3]}) | {row[2].replace('|', '-')} | {row[4]}|\n" if row[5].upper() != CVE_NOT_FOUND else f"| {row[5].upper()} | [{row[1]}]({row[3]}) | {row[2].replace('|', '-')} | {row[4]}|\n"
        write_file(newline)

    # Close database connection
    db.close()

if __name__ == "__main__":
    # Initialize README file
    init_file()
    # Run the main function
    main()