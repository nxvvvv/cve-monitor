import requests
from peewee import *
from datetime import datetime
import html
import time
import random
import math
import re
import json

# Database model definition
db = SqliteDatabase("db/cve.sqlite")

class CVE_DB(Model):
    id = AutoField(primary_key=True)
    full_name = CharField(max_length=1024)
    description = CharField(max_length=4098)
    url = CharField(max_length=1024)
    created_at = CharField(max_length=128)
    cve = CharField(max_length=64, index=True)

    class Meta:
        database = db

db.connect()
db.create_tables([CVE_DB])

# Function to initialize the README file
def init_file():
    newline = "# Github CVE Monitor\n\n> Automatic monitor github cve using Github Actions \n\n Last generated : {}\n\n| CVE | Name | Description | Date |\n|---|---|---|---|\n".format(
        datetime.now())
    with open('docs/README.md', 'w') as f:
        f.write(newline)

# Function to write content to the README file
def write_file(new_contents):
    with open('docs/README.md', 'a') as f:
        f.write(new_contents)

# Function to get CVE information from the GitHub API
def get_info(year):
    try:
        api = "https://api.github.com/search/repositories?q=CVE-{}&sort=updated&page=1&per_page=100".format(year)
        req = requests.get(api).json()
        items = req["items"]
        return items
    except Exception as e:
        print("An error occurred in the network request:", e)
        return None

# Function to match and insert CVE information into the database
def db_match(items):
    regex = r"[Cc][Vv][Ee][-_]\d{4}[-_]\d{4,7}"
    r_list = [
        {
            "id": item["id"],
            "full_name": html.escape(item["full_name"]),
            "description": html.escape(item["description"].strip()) if item["description"] else 'no description',
            "url": item["html_url"],
            "created_at": item["created_at"],
            "cve": re.search(regex, item["html_url"]).group() if re.search(regex, item["html_url"]) else "CVE Not Found"
        }
        for item in items
        if CVE_DB.select().where(CVE_DB.id == item["id"]).count() == 0
    ]
    return sorted(r_list, key=lambda e: e.__getitem__('created_at'))

# Main function to fetch and process CVE information
def main():
    year = datetime.now().year
    sorted_list = []

    for i in range(year, 1999, -1):
        item = get_info(i)
        if item is None or len(item) == 0:
            continue
        print("Year : {} : raw data obtained {} articles".format(i, len(item)))
        sorted = db_match(item)
        if len(sorted) != 0:
            print("Year {} : update {} articles".format(i, len(sorted)))
            sorted_list.extend(sorted)
        count = random.randint(3, 15)
        time.sleep(count)

    cur = db.cursor()
    cur.execute("SELECT * FROM CVE_DB ORDER BY cve DESC;")
    result = cur.fetchall()

    for row in result:
        Publish_Date = row[4]
        Description = row[2].replace('|', '-')
        if row[5].upper() == "CVE NOT FOUND":
            newline = "| {} | [{}]({}) | {} | {}|\n".format(row[5].upper(), row[1], row[3], Description, Publish_Date)
        else:
            newline = "| [{}](https://www.cve.org/CVERecord?id={}) | [{}]({}) | {} | {}|\n".format(row[5].upper(), row[5].upper(), row[1], row[3], Description, Publish_Date)
        write_file(newline)

    # Close database connection
    db.close()

if __name__ == "__main__":
    init_file()
    main()
